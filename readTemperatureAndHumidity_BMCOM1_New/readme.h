/*
Arduino C 語言程式介紹：溫溼度感測器讀取程式
以下是針對您提供的兩個檔案
（BME33M251Lib.h 和 readTemperatureAndHumidity_BMCOM1_New.ino）
所撰寫的 Arduino C 語言程式之詳細介紹。我將使用繁體中文，從程式原理、函式介紹以及執行流程三個部分來解釋。這個程式是基於 Arduino 開發環境，目的是透過 I2C 通訊介面讀取 BM25S2021-1 溫溼度感測器的資料，並將結果顯示在序列埠監控視窗中。程式設計簡單且模組化，便於擴展和維護。

1. 程式原理
這個程式的核心是使用 Arduino 開發板
連接 BM25S2021-1 溫溼度感測器（一種基於 I2C 通訊協議的感測器模組），
透過 I2C 介面讀取感測器的溫度（單位：攝氏度 °C）
和相對濕度（單位：百分比 %）資料。
程式會在啟動時初始化感測器，
並取得感測器的基本資訊（如序號、產品 ID 和韌體版本），
然後每隔 2 秒重複讀取並顯示溫溼度值。

硬體基礎：感測器使用 I2C 通訊（Inter-Integrated Circuit），
這是一種串列通訊協議，
允許多個裝置透過兩條線（SDA 和 SCL）連接 Arduino。
程式支援多種 I2C 介面（Wire、Wire1、Wire2），
以適應不同開發板的腳位配置（如 ESP32 系列）。

軟體架構：程式採用模組化設計，
將感測器相關的函式封裝在自訂頭檔 BME33M251Lib.h 中。
主要程式檔 readTemperatureAndHumidity_BMCOM1_New.ino 則負責初始化和循環讀取。使用序列埠（Serial）輸出資料，
方便在 Arduino IDE 的序列埠監控視窗查看結果。

運作邏輯：程式分為初始化階段（setup() 函式）和循環階段（loop() 函式）。
初始化階段設定通訊速率並取得感測器資訊；循環階段則持續讀取資料，避免過度頻繁讀取以節省資源（使用 delay() 延遲 2 秒）。
依賴庫：引入外部函式庫 BM25S2021-1.h，這是專為 BM25S2021-1 感測器設計的庫，提供讀取溫溼度和取得裝置資訊的 API。
優勢與注意事項：程式簡單高效，適合初學者學習 I2C 通訊和感測器應用。但需注意感測器電源供應穩定（通常 3.3V 或 5V），以及 I2C 位址衝突問題。如果感測器未正確連接，程式可能無法讀取資料並顯示錯誤。

2. 函式介紹
程式中的函式主要來自自訂頭檔 BME33M251Lib.h，
並在主要程式檔中被呼叫。
以下詳細介紹每個函式的功能、參數、回傳值和使用方式。
所有函式均使用全域變數 temp（溫度）和 humid（濕度）來儲存讀取結果。


-----------------------------------------
initBME33M251()：

功能：初始化溫溼度感測器，並顯示感測器的基本裝置資訊。這是程式啟動時必須執行的第一步，確保感測器就緒。
參數：無。
回傳值：無（void）。
詳細說明：

呼叫 BMht.begin() 啟動感測器。
初始化序列埠 Serial.begin(9600)，設定傳輸速率為 9600 bps，用於輸出資料到電腦。
顯示感測器資訊，包括序號（SN）、產品 ID（PID）和韌體版本（VER），以 16 進位格式輸出。
使用感測器庫的 API 如 BMht.getSN()、BMht.getPID() 和 BMht.getFWVer() 來取得資訊。


範例輸出：在序列埠監控視窗顯示如 "SN : XXXXXXXX" 的資訊。

-----------------------------------------
readTemperature()：

功能：讀取感測器的溫度值。
參數：無。
回傳值：浮點數（float），單位為攝氏度 (°C)。
詳細說明：直接呼叫感測器庫的 BMht.readTemperature() 方法，取得即時溫度讀數。如果感測器讀取失敗，可能回傳無效值（如 NaN 或 0）。

-----------------------------------------
readHumidity()：

功能：讀取感測器的相對濕度值。
參數：無。
回傳值：浮點數（float），單位為百分比 (%)。
詳細說明：直接呼叫感測器庫的 BMht.readHumidity() 方法，取得即時濕度讀數。類似溫度讀取，需確保感測器已初始化。

-----------------------------------------
readSensor()：

功能：同時讀取溫度與濕度值，並儲存到全域變數中。這是整合讀取的包裝函式，便於在 loop() 中重複呼叫。
參數：無。
回傳值：無（void）。
詳細說明：內部呼叫 readTemperature() 和 readHumidity()，將結果分別存入全域變數 temp 和 humid。這避免了重複呼叫感測器庫，優化程式效率。

-----------------------------------------
printSensorData()：

功能：將讀取到的溫溼度資料輸出到序列埠監控視窗。
參數：無。
回傳值：無（void）。
詳細說明：

使用 Serial.print() 和 Serial.println() 顯示格式化的輸出。
輸出格式如 "Humidity : XX.XX %    Temperature : XX.XX °C"。
這是顯示層的函式，方便使用者查看即時資料。



-----------------------------------------
其他相關物件與全域變數：

BM25S2021_1 BMht(&Wire1)：感測器物件初始化，使用 Wire1 作為 I2C 介面（可根據硬體調整為 Wire 或 Wire2）。
double temp 和 double humid：全域變數，用來儲存溫度與濕度讀數，支持小數點精度。


-----------------------------------------
3. 執行流程
Arduino 程式採用事件驅動模型，
主要分為 setup()（初始化）和 loop()（循環執行）兩個階段。
以下是步驟式的流程說明：


程式啟動（電源供應後）：

Arduino 開發板通電，系統自動載入並執行 setup() 函式。


初始化階段（setup() 函式）：

呼叫 Serial.begin(9600)：初始化序列埠，
設定速率為 9600 bps，
讓程式能輸出文字到 Arduino IDE 的序列埠監控視窗。

呼叫 initBME33M251()：初始化感測器，
顯示裝置資訊（如 SN、PID、VER）。
這步確保感測器連線正常。

延遲 delay(2000)：等待 2 秒，
讓使用者有時間閱讀序列埠輸出的裝置資訊，
避免資訊閃過太快。


循環階段（loop() 函式）：

這是無限循環的部分，
每輪循環執行以下步驟：

呼叫 readSensor()：讀取感測器的溫度和濕度值，
並存入全域變數 temp 和 humid。

呼叫 printSensorData()：將讀取到的資料格式化輸出到序列埠，
例如 "Humidity : 50.00 %    Temperature : 25.00 °C"。

延遲 delay(2000)：等待 2 秒後，再次重複循環。
這防止過度頻繁讀取感測器，減少 CPU 負荷並模擬實際應用中的間隔取樣。




結束條件：

程式不會主動結束，
除非斷電或重置 Arduino 板。
loop() 會持續運行，
適合長期監測應用。





*/